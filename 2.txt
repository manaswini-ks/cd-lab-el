A. 
%{
#include <stdio.h>
int posint = 0, negint = 0, posfrac = 0, negfrac = 0;
%}

num [0-9]+

posint \+?{num}
negint -{num}

posnum \+?{num}\.{num}?|\+?\.{num}
negnum -{num}\.{num}?|-\.{num}

%%

{posint} posint++;

{negint} negint++;

{posnum} posfrac++;

{negnum} negfrac++;

{posnum}\/{posnum} |
{negnum}\/{negnum} posfrac++;

{posnum}\/{negnum} |
{negnum}\/{posnum} negfrac++;

[ \t] ;

[\n] return 0;

. ECHO;

%%

int yywrap(){}

int main() {
	yylex();
	printf("Positive integers: %d\n", posint);
	printf("Negative integers: %d\n", negint);
	printf("Positive fractions: %d\n", posfrac);
	printf("Negative fractions: %d\n", negfrac);
}

B.

lex.l
%{
	#include "y.tab.h"
	extern yylval;
%}
%%
[0-9]+	{yylval=atoi(yytext);return NUM;}
[-+*/]	{return yytext[0];}
.	{return yytext[0];}
\n 	{return 0;}
%%

yaac.y
%{
	#include<stdio.h>
	#include<stdlib.h>		
%}
%token NUM
%left '+' '-'
%left '/' '*'
%%
S:I {printf("Result is %d\n",$$);}
;
I:I'+'I 	{$$=$1+$3;}
|I'-'I 		{$$=$1-$3;}
|I'*'I 		{$$=$1*$3;}
|I'/'I 		{if($3==0){yyerror();}	else{$$=$1/$3;}}
|'('I')'	{$$=$2;}
|NUM		{$$=$1;}
|'-'NUM		{$$=-$2;}
;
%%
int main()
{
	printf("Enter operation:\n");
	yyparse();
	printf("Valid\n");
	return 0;
}
int yyerror()
{
	printf("Invalid\n");
	exit(0);
}