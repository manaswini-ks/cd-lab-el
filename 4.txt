A.
%{
    #include<stdio.h>
    int id=0,key=0,op=0;
%}

%%
"int"|"char"|"float"|"double"|"if"|"else"|"for"|"while"|"exit"|"return" {printf("Keyword\n");key++;}
[a-zA-Z_][a-zA-Z0-9_]*  {printf("Identifier\n");id++;}
[\+\-\*\/\%\^\&\|\!\=]  {printf("Operator\n");op++;}
[^\n]*  {printf("Invalid\n");}
%%


int main()
{
    printf("Enter:\n");
    yylex();
    printf("Identifiers: %d\nKeywords: %d\nOperators: %d\n",id,key,op);
    return 0;
}
int yywrap()
{
    return 1;
}

B.
lex.l
%{
    #include "y.tab.h"
%}
%%
"if"    {return IF;}
[a-zA-Z]*   {return IDEN;}
[0-9]+  {return NUM;}
[\n ]   ;
.   {return yytext[0];}
%%

yaac.y 
%{
    #include<stdio.h>
    #include<stdlib.h>
    int cnt=0;
%}
%token IF IDEN NUM
%%
S:I
;
I:IF A B    {cnt++;}
;
A:'('E')'
;
E:IDEN Z IDEN
|IDEN Z NUM
|IDEN U
|IDEN
;
Z:'='|'<'|'>'|'<''='|'>''='|'=''+'|'=''-'
;
U:'+''+'|'-''-'
;
B:B B
|'{'B'}'
|I
|E';'
|
;
%%
int main()
{
    printf("Enter the snippet:\n");
    yyparse();
    printf("Count of if is %d\n",cnt);
    return 0;
}
int yyerror()
{
    printf("Invalid\n");
    exit(0);
}